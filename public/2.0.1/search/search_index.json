{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#gemseo-matlab","title":"gemseo-matlab","text":""},{"location":"#overview","title":"Overview","text":"<p>MATLAB wrapper for GEMSEO</p>"},{"location":"#installation","title":"Installation","text":"<p>Warning</p> <p>This plugin requires that a MATLAB engine as well as its Python API are installed. The MATLAB Python API is not defined as a dependency of this package, because until MATLAB release R2020b there was no package available in PyPI. It shall be installed in the same environment as the one in which this plugin is installed, please refer to the MATLAB documentation for further information.</p> <p>Here are the current versions of the MATLAB Python packages per MATLAB versions:</p> Python Matlab matlabengine 3.9 r2021b 9.11 3.9 r2022a 9.12 3.9, 3.10 r2022b 9.13 3.9, 3.10 r2023a 9.14 3.9, 3.10, 3.11 r2023b 23.2 3.9, 3.10, 3.11 r2024a 24.1 <p>To make sure that MATLAB works fine through the Python API, start a Python interpreter and check that there is no error when executing <code>import matlab</code>.</p> <p>Install the latest stable version with <code>pip install gemseo-matlab</code>.</p> <p>See pip for more information.</p>"},{"location":"#development","title":"Development","text":"<p>For testing with <code>tox</code>, set the environment variable <code>MATLAB_PIP_REQ_SPEC</code> to point to the URL or path of a <code>pip</code> installable version of the MATLAB Python API, with eventually a conditional dependency on the Python version:</p> <pre><code>export MATLAB_PIP_REQ_SPEC=\"matlabengine~=X.Y.0\"\n</code></pre> <p>where <code>X.Y</code> is the version number in above table.</p>"},{"location":"#docker","title":"Docker","text":"<p>To create or update the podman/docker images for testing the plugin, adapt with the proper version of matlab:</p> <pre><code>podman build Dockerfile -t gemseo-matlab:r2020b --build-arg=MATLAB_VERSION=r2020b\n</code></pre>"},{"location":"#bugs-and-questions","title":"Bugs and questions","text":"<p>Please use the gitlab issue tracker to submit bugs or questions.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>See the contributing section of GEMSEO.</p>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>GEMSEO developers</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":"<p>All notable changes of this project will be documented here.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#version-201-april-2025","title":"Version 2.0.1 (April 2025)","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support GEMSEO v6.1.0.</li> <li>Support for Python 3.12.</li> <li>Support for matlab r2023b, r2024a.</li> </ul>"},{"location":"changelog/#version-200-november-2024","title":"Version 2.0.0 (November 2024)","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Support GEMSEO v6.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>The following arguments of <code>MatlabDiscipline</code> constructor were changed:</li> <li><code>matlab_fct</code> to <code>matlab_function_path</code></li> <li><code>search_file</code> to <code>root_search_path</code></li> <li><code>matlab_data_file</code> to <code>matlab_data_path</code></li> <li><code>clean_cache_each_n</code> to <code>cleaning_interval</code></li> </ul>"},{"location":"changelog/#version-103-december-2023","title":"Version 1.0.3 (December 2023)","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Support for Python 3.11.</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Support for Python 3.8.</li> </ul>"},{"location":"changelog/#version-102-december-2023","title":"Version 1.0.2 (December 2023)","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Compatibility with GEMSEO version 5.2.</li> </ul>"},{"location":"changelog/#version-101-september-2023","title":"Version 1.0.1 (September 2023)","text":""},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li> <p>Memory leaks are fixed in the Matlab discipline, for matlabengine &gt;= 9.12. Linked issue: https://gitlab.com/gemseo/dev/gemseo-matlab/-/issues/4</p> </li> <li> <p>The MatLab discipline can now be instantiated using input and output grammar files. Linked issue: https://gitlab.com/gemseo/dev/gemseo-matlab/-/issues/3</p> </li> <li> <p>The Matlab discipline can now be serialized. Linked issue: https://gitlab.com/gemseo/dev/gemseo/-/issues/674</p> </li> </ul>"},{"location":"changelog/#version-100-june-2023","title":"Version 1.0.0 (June 2023)","text":"<p>First release.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>The developers thank all the open source libraries making <code>gemseo-matlab</code> possible.</p>"},{"location":"credits/#exec-1--external-dependencies","title":"External Dependencies","text":"<p><code>gemseo-matlab</code> depends on software with compatible licenses that are listed below.</p> Project License <code>Python</code> Python Software License <code>gemseo</code> GNU Lesser General Public License v3 <code>numpy</code> BSD License <code>scipy</code> BSD License <code>strenum</code> MIT License"},{"location":"credits/#exec-1--external-applications","title":"External applications","text":"<p>Some external applications are used by <code>gemseo-matlab</code>, but not linked with the application, for testing, documentation generation, training or example purposes.</p> Project License <code>black</code> MIT License <code>commitizen</code> MIT License <code>covdefaults</code> MIT License <code>griffe-inherited-docstrings</code> ISC <code>insert-license</code> MIT <code>markdown-exec</code> ? <code>mike</code> BSD-3-Clause <code>mkdocs-bibtex</code> BSD-3-Clause-LBNL <code>mkdocs-gallery</code> BSD 3-Clause <code>mkdocs-gen-files</code> MIT License <code>mkdocs-include-markdown-plugin</code> Apache Software License <code>mkdocs-literate-nav</code> MIT License <code>mkdocs-material</code> MIT License <code>mkdocs-section-index</code> MIT License <code>mkdocstrings</code> ? <code>pre-commit</code> MIT License <code>pygrep-hooks</code> MIT <code>pytest</code> MIT License <code>pytest-cov</code> MIT License <code>pytest-xdist</code> MIT License <code>ruff</code> MIT License <code>setuptools</code> ? <code>setuptools-scm</code> MIT License"},{"location":"licenses/","title":"Licenses","text":""},{"location":"licenses/#licenses","title":"Licenses","text":""},{"location":"licenses/#gnu-lgpl-v30","title":"GNU LGPL v3.0","text":"<p>The <code>gemseo-matlab</code> source code is distributed under the GNU LGPL v3.0 license. <pre><code>Copyright 2021 IRT Saint Exup\u00e9ry, https://www.irt-saintexupery.com\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU Lesser General Public\nLicense version 3 as published by the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nLesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program; if not, write to the Free Software Foundation,\nInc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n</code></pre></p>"},{"location":"licenses/#bsd-0-clause","title":"BSD 0-Clause","text":"<p>The <code>gemseo-matlab</code> examples are distributed under the BSD 0-Clause <pre><code>Copyright 2021 IRT Saint Exup\u00e9ry, https://www.irt-saintexupery.com\n\nThis work is licensed under a BSD 0-Clause License.\n\nPermission to use, copy, modify, and/or distribute this software\nfor any purpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL\nWARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL\nTHE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,\nOR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING\nFROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,\nNEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION\nWITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre></p>"},{"location":"licenses/#cc-by-sa-40","title":"CC BY-SA 4.0","text":"<p>The <code>gemseo-matlab</code> documentation is distributed under the CC BY-SA 4.0 license. <pre><code>Copyright 2021 IRT Saint Exup\u00e9ry, https://www.irt-saintexupery.com\n\nThis work is licensed under the Creative Commons Attribution-ShareAlike 4.0\nInternational License. To view a copy of this license, visit\nhttp://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative\nCommons, PO Box 1866, Mountain View, CA 94042, USA.\n</code></pre></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>gemseo_matlab<ul> <li>engine</li> <li>license_manager</li> <li>matlab_data_processor</li> <li>matlab_discipline</li> <li>matlab_parser</li> </ul> </li> </ul>"},{"location":"reference/gemseo_matlab/","title":"API documentation","text":""},{"location":"reference/gemseo_matlab/#gemseo_matlab","title":"gemseo_matlab","text":"<p>Matlab wrapper.</p>"},{"location":"reference/gemseo_matlab/engine/","title":"Engine","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine","title":"engine","text":"<p>Definition of the matlab engine singleton for workspace handling.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine--overview","title":"Overview","text":"<p>This module contains the :class:<code>.MatlabEngine</code> class which enables to build the Matlab workspace. The Matlab workspace must be seen as the Matlab \"area\" where Matlab functions are executed as well as Matlab variables live. The engine is basically used when creating a :class:<code>.MatlabDiscipline</code> instance and therefore is not directly handled by the user. However, a :class:<code>.MatlabEngine</code> instance can be used outside a :class:<code>.MatlabDiscipline</code> in order to directly call Matlab functions and/or accessing to some variables into the Matlab workspace.</p> <p>Since :class:<code>.MatlabEngine</code> is private, it cannot be used directly from the module. It is rather used through the function :func:<code>.get_matlab_engine</code> which enables to create only one instance with respect to the <code>workspace_name</code> (i.e. the instance is unique if the workspace name is the same when calling several times the function). Following this, :class:<code>.MatlabEngine</code> acts like a singleton.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine","title":"MatlabEngine","text":"<pre><code>MatlabEngine(engine_name: str)\n</code></pre> <p>Wrapper around the matlab execution engine.</p> <p>Since this class is private, an instance should be built through :func:<code>get_matlab_engine</code> function. Using that latter function acts like a singleton, i.e. the returned instance is unique if the workspace name is the same.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; eng1 = get_matlab_engine()\n&gt;&gt;&gt; # add new searching directory to workspace with sub-dir\n&gt;&gt;&gt; eng1.add_path(\"dir_to_files\", add_subfolder=True)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # check if a function exists in workspace and returns the type\n&gt;&gt;&gt; exist, type_func = eng1.exist(\"cos\")\n&gt;&gt;&gt; # execute the function\n&gt;&gt;&gt; eng1.execute_function(\"cos\", 0, nargout=1)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # quit engine\n&gt;&gt;&gt; eng1.close_session()\n&gt;&gt;&gt; print(eng1.is_closed)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>engine_name</code>               (<code>str</code>)           \u2013            <p>The name identifying the engine.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def __init__(self, engine_name: str) -&gt; None:\n    \"\"\"\n    Args:\n        engine_name: The name identifying the engine.\n    \"\"\"  # noqa: D205, D212, D415\n    self.__engine_name = engine_name\n    self.__is_closed = True\n    self.__paths = []\n    self.__toolboxes = set()\n    self.__is_parallel = False\n\n    self.start_engine()\n    self.add_path(str(Path(__file__).parent))\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine-attributes","title":"Attributes","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.engine_name","title":"engine_name  <code>property</code>","text":"<pre><code>engine_name: str\n</code></pre> <p>The engine name.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Return True if the matlab engine is closed.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.is_parallel","title":"is_parallel  <code>property</code>","text":"<pre><code>is_parallel: bool\n</code></pre> <p>Return True if parallel is active.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.paths","title":"paths  <code>property</code>","text":"<pre><code>paths: list[str]\n</code></pre> <p>Return the paths.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.ParallelType","title":"ParallelType","text":"<p>               Bases: <code>StrEnum</code></p> <p>Types of Matlab parallel execution.</p>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.add_path","title":"add_path","text":"<pre><code>add_path(\n    path: str | Path, add_subfolder: bool = False\n) -&gt; None\n</code></pre> <p>Add a path to the matlab engine search directories.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the directory or file to be added to path.</p> </li> <li> <code>add_subfolder</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to add the sub-folders recursively.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the given path cannot be added to Matlab.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def add_path(\n    self,\n    path: str | Path,\n    add_subfolder: bool = False,\n) -&gt; None:\n    \"\"\"Add a path to the matlab engine search directories.\n\n    Args:\n        path: The path to the directory or file to be added to path.\n        add_subfolder: Whether to add the sub-folders recursively.\n\n    Raises:\n        ValueError: If the given path cannot be added to Matlab.\n    \"\"\"\n    path = str(path)\n    if path not in self.__paths:\n        if not self.exist(path):\n            msg = (\n                f\"The given path {path} is not found and cannot be added to matlab.\"\n            )\n            raise ValueError(msg)\n        self.__paths.append(path)\n        self.__matlab.addpath(path)\n\n    if add_subfolder:\n        str_paths = self.execute_function(\"genpath\", path)\n        # first path in list is the path already in list\n        for sub_path in str_paths.split(os.pathsep)[1:]:\n            self.add_path(sub_path)\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.add_toolbox","title":"add_toolbox","text":"<pre><code>add_toolbox(toolbox_name: str) -&gt; None\n</code></pre> <p>Add a toolbox to the engine.</p> <p>The toolbox added would be needed for the functions used in the current session. It should be checked that the license is compatible. The name given here can be found using \"license('inuse')\" in MATLAB.</p> <p>Parameters:</p> <ul> <li> <code>toolbox_name</code>               (<code>str</code>)           \u2013            <p>The name of the toolbox to be checked.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def add_toolbox(self, toolbox_name: str) -&gt; None:\n    \"\"\"Add a toolbox to the engine.\n\n    The toolbox added would be needed for the functions\n    used in the current session. It should be checked that\n    the license is compatible.\n    The name given here can be found using \"license('inuse')\" in MATLAB.\n\n    Args:\n        toolbox_name: The name of the toolbox to be checked.\n    \"\"\"\n    self.__toolboxes.add(toolbox_name)\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.close_session","title":"close_session","text":"<pre><code>close_session() -&gt; None\n</code></pre> <p>Close the matlab session.</p> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def close_session(self) -&gt; None:\n    \"\"\"Close the matlab session.\"\"\"\n    self.__matlab.quit()\n    self.__is_closed = True\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.end_parallel_computing","title":"end_parallel_computing","text":"<pre><code>end_parallel_computing() -&gt; None\n</code></pre> <p>End the parallel computing.</p> <p>Raises:</p> <ul> <li> <code>MatlabExecutionError</code>             \u2013            <p>If the parallel option is not correctly deactivated.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def end_parallel_computing(self) -&gt; None:\n    \"\"\"End the parallel computing.\n\n    Raises:\n        matlab.engine.MatlabExecutionError: If the parallel option is not\n            correctly deactivated.\n    \"\"\"\n    if not self.__is_parallel:\n        LOGGER.info(\"Try to end parallel computing whereas it is not activated.\")\n        return\n\n    LOGGER.info(\"Closing MATLAB parallel pools.\")\n\n    try:\n        self.execute_function(\"eval\", \"delete(gcp('nocreate'))\", nargout=0)\n    except matlab.engine.MatlabExecutionError:\n        LOGGER.warning(\"Parallel computing could not be closed.\")\n        raise\n    else:\n        self.__is_parallel = False\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.execute_function","title":"execute_function","text":"<pre><code>execute_function(\n    func_name: str, *args: float | str, **kwargs: float\n) -&gt; Any\n</code></pre> <p>Executes a Matlab function called \"func_name\".</p> <p>Parameters:</p> <ul> <li> <code>func_name</code>               (<code>str</code>)           \u2013            <p>The function name to call.</p> </li> <li> <code>*args</code>               (<code>float | str</code>, default:                   <code>()</code> )           \u2013            <p>Any arguments that must be passed to the function.</p> </li> <li> <code>**kwargs</code>               (<code>float</code>, default:                   <code>{}</code> )           \u2013            <p>Any arguments that must be passed to the function.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>MatlabExecutionError</code>             \u2013            <p>If the matlab function execution fails.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def execute_function(\n    self,\n    func_name: str,\n    *args: float | str,\n    **kwargs: float,\n) -&gt; Any:\n    \"\"\"Executes a Matlab function called \"func_name\".\n\n    Args:\n        func_name: The function name to call.\n        *args: Any arguments that must be passed to the function.\n        **kwargs: Any arguments that must be passed to the function.\n\n    Raises:\n        matlab.engine.MatlabExecutionError: If the matlab function execution fails.\n    \"\"\"\n    if self.__is_closed:\n        self.start_engine()\n\n    method = getattr(self.__matlab, func_name)\n\n    try:\n        return method(*args, **kwargs)\n\n    except matlab.engine.MatlabExecutionError:\n        LOGGER.exception(\n            \"Failed to execute Matlab function %s with arguments %s and %s\",\n            func_name,\n            str(args),\n            str(kwargs),\n        )\n        raise\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.execute_script","title":"execute_script","text":"<pre><code>execute_script(script_name: str) -&gt; None\n</code></pre> <p>Execute a script in the current workspace.</p> <p>After executing the script, the workspace point to the path where the script is located.</p> <p>Parameters:</p> <ul> <li> <code>script_name</code>               (<code>str</code>)           \u2013            <p>The script name.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def execute_script(self, script_name: str) -&gt; None:\n    \"\"\"Execute a script in the current workspace.\n\n    After executing the script, the workspace point to the path\n    where the script is located.\n\n    Args:\n        script_name: The script name.\n    \"\"\"\n    # get the script absolute path\n    entire_path = self.execute_function(\"which\", script_name, nargout=1)\n    abspath, _, _ = self.execute_function(\"fileparts\", entire_path, nargout=3)\n\n    # move to the script path\n    self.execute_function(\"cd\", abspath, nargout=0)\n\n    # execute the script\n    self.execute_function(\"run\", script_name, nargout=0)\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.exist","title":"exist","text":"<pre><code>exist(name: str | Path) -&gt; tuple[bool, str]\n</code></pre> <p>Check if the given matlab file exists.</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str | Path</code>)           \u2013            <p>The name to be checked if present in MATLAB path.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[bool, str]</code>           \u2013            <p>A boolean that tells if <code>name</code> exist. A string that indicates the type of file where <code>function_name</code> is found.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def exist(self, name: str | Path) -&gt; tuple[bool, str]:\n    \"\"\"Check if the given matlab file exists.\n\n    Args:\n        name: The name to be checked if present in MATLAB path.\n\n    Returns:\n        A boolean that tells if ``name`` exist.\n        A string that indicates the type of file where\n        ``function_name`` is found.\n    \"\"\"\n    out = int(self.execute_function(\"exist\", str(name)))\n    # 0 \u2014 given name does not exist.\n    # 1 \u2014 name is a variable in the workspace.\n    # 2 \u2014 name is a file with extension .m, .mlx, or .mlapp,\n    #     or name is the name of a file with a non-registered file\n    #     extension (.mat, .fig, .txt).\n    # 3 \u2014 name is a MEX-file on your MATLAB search path.\n    # 4 \u2014 name is a loaded Simulink\u00ae model or a Simulink model or\n    #     library file on your MATLAB search path.\n    # 5 \u2014 name is a built-in MATLAB function. This does not include classes.\n    # 6 \u2014 name is a P-code file on your MATLAB search path.\n    # 7 \u2014 name is a folder.\n    # 8 \u2014 name is a class. (exist returns 0 for Java classes if\n    #     you start MATLAB with the -nojvm option.)\n    return out != 0, self.__EXIST_TO_TYPE_NAME[out]\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.get_toolboxes","title":"get_toolboxes","text":"<pre><code>get_toolboxes() -&gt; set[str]\n</code></pre> <p>Return all toolboxes to be checked before launching this engine.</p> <p>Returns:</p> <ul> <li> <code>set[str]</code>           \u2013            <p>All toolboxes.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def get_toolboxes(self) -&gt; set[str]:\n    \"\"\"Return all toolboxes to be checked before launching this engine.\n\n    Returns:\n        All toolboxes.\n    \"\"\"\n    return self.__toolboxes\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.get_variable","title":"get_variable","text":"<pre><code>get_variable(item: str) -&gt; ndarray\n</code></pre> <p>Get any variable in the workspace.</p> <p>Parameters:</p> <ul> <li> <code>item</code>               (<code>str</code>)           \u2013            <p>The variable name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The value of the variable.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If the item is unknown inside the workspace.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def get_variable(self, item: str) -&gt; ndarray:\n    \"\"\"Get any variable in the workspace.\n\n    Args:\n        item: The variable name.\n\n    Returns:\n        The value of the variable.\n\n    Raises:\n        ValueError: If the item is unknown inside the workspace.\n    \"\"\"\n    try:\n        return double2array(self.__matlab.workspace[item])\n    except matlab.engine.MatlabExecutionError:\n        msg = (\n            f\"The variable {item} does not exist in the \"\n            f\"current {self.__engine_name} workspace.\"\n        )\n        raise ValueError(msg) from None\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.remove_toolbox","title":"remove_toolbox","text":"<pre><code>remove_toolbox(toolbox_name: str) -&gt; None\n</code></pre> <p>Remove a toolbox from the engine.</p> <p>Parameters:</p> <ul> <li> <code>toolbox_name</code>               (<code>str</code>)           \u2013            <p>The name of the toolbox to be checked.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def remove_toolbox(self, toolbox_name: str) -&gt; None:\n    \"\"\"Remove a toolbox from the engine.\n\n    Args:\n        toolbox_name: The name of the toolbox to be checked.\n    \"\"\"\n    self.__toolboxes.remove(toolbox_name)\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.start_engine","title":"start_engine","text":"<pre><code>start_engine() -&gt; None\n</code></pre> <p>Start the matlab engine.</p> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def start_engine(self) -&gt; None:\n    \"\"\"Start the matlab engine.\"\"\"\n    LOGGER.info('Starting Matlab engine named \"%s\".', self.__engine_name)\n    self.__matlab = matlab.engine.start_matlab()\n    LOGGER.info('Matlab engine named \"%s\" started', self.__engine_name)\n\n    for path in self.__paths:\n        self.__matlab.addpath(path)\n    self.__is_closed = False\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.MatlabEngine.start_parallel_computing","title":"start_parallel_computing","text":"<pre><code>start_parallel_computing(\n    n_parallel_workers: int,\n    parallel_type: ParallelType = LOCAL,\n) -&gt; None\n</code></pre> <p>Start the parallel pool of matlab for parallel computing.</p> <p>This feature only works if parallel toolbox is available.</p> <p>Parameters:</p> <ul> <li> <code>n_parallel_workers</code>               (<code>int</code>)           \u2013            <p>The number of \"workers\" to the parallel pool.</p> </li> <li> <code>parallel_type</code>               (<code>ParallelType</code>, default:                   <code>LOCAL</code> )           \u2013            <p>The type of parallel execution.</p> </li> </ul> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>def start_parallel_computing(\n    self,\n    n_parallel_workers: int,\n    parallel_type: ParallelType = ParallelType.LOCAL,\n) -&gt; None:\n    \"\"\"Start the parallel pool of matlab for parallel computing.\n\n    This feature only works if parallel toolbox is available.\n\n    Args:\n        n_parallel_workers: The number of \"workers\" to the parallel pool.\n        parallel_type: The type of parallel execution.\n    \"\"\"\n    exist, _ = self.exist(\"parpool\")\n\n    if exist is False:\n        LOGGER.warning(\"Parallel computing not available in MATLAB\")\n        self.__is_parallel = False\n        return\n\n    LOGGER.info(\n        \"Starting parallel computing with %s workers on '%s' cluster.\",\n        n_parallel_workers,\n        parallel_type,\n    )\n\n    try:\n        self.execute_function(\n            \"parpool\", parallel_type, float(n_parallel_workers), nargout=0\n        )\n    except matlab.engine.MatlabExecutionError:\n        LOGGER.warning(\n            \"Parallel computing could not be started, proceeding without.\"\n        )\n        self.__is_parallel = False\n    else:\n        self.__is_parallel = True\n\n        LOGGER.info(\"MATLAB parallel computing successfully started.\")\n        LOGGER.info(\n            \"Only MATLAB function and classes using some 'parfor' will be \"\n            \"computed in parallel.\"\n        )\n</code></pre>"},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/engine/#gemseo_matlab.engine.get_matlab_engine","title":"get_matlab_engine  <code>cached</code>","text":"<pre><code>get_matlab_engine(\n    workspace_name: str = \"matlab\",\n) -&gt; MatlabEngine\n</code></pre> <p>Return a new matlab engine.</p> <p>LRU cache decorator enables to cache the instance if prescribed <code>workspace_name</code> is the same. Therefore, it acts like a singleton. This means that calling this function with the same <code>workspace_name</code> returns the same instance.</p> <p>Parameters:</p> <ul> <li> <code>workspace_name</code>               (<code>str</code>, default:                   <code>'matlab'</code> )           \u2013            <p>The name of matlab workspace.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MatlabEngine</code>           \u2013            <p>A Matlab engine instance.</p> </li> </ul> <p>Examples:</p> <pre><code>&gt;&gt;&gt; eng1 = get_matlab_engine()\n&gt;&gt;&gt; eng2 = get_matlab_engine()\n&gt;&gt;&gt; # make sure that engines are the same\n&gt;&gt;&gt; eng1 is eng2\n</code></pre> Source code in <code>src/gemseo_matlab/engine.py</code> <pre><code>@lru_cache\ndef get_matlab_engine(\n    workspace_name: str = \"matlab\",\n) -&gt; MatlabEngine:\n    \"\"\"Return a new matlab engine.\n\n    LRU cache decorator enables to cache the instance\n    if prescribed ``workspace_name`` is the same.\n    Therefore, it acts like a singleton.\n    This means that calling this function with the same\n    ``workspace_name`` returns the same instance.\n\n    Args:\n        workspace_name: The name of matlab workspace.\n\n    Returns:\n        A Matlab engine instance.\n\n    Examples:\n        &gt;&gt;&gt; eng1 = get_matlab_engine()\n        &gt;&gt;&gt; eng2 = get_matlab_engine()\n        &gt;&gt;&gt; # make sure that engines are the same\n        &gt;&gt;&gt; eng1 is eng2\n    \"\"\"\n    return MatlabEngine(workspace_name)\n</code></pre>"},{"location":"reference/gemseo_matlab/license_manager/","title":"License manager","text":""},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager","title":"license_manager","text":"<p>Definition of the Matlab license manager.</p>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager--overview","title":"Overview","text":"<p>This module contains the :class:<code>.LicenseManager</code> which enables to check the presence of any toolbox licenses of the Matlab installation.</p>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager","title":"LicenseManager","text":"<pre><code>LicenseManager(engine: MatlabEngine)\n</code></pre> <p>Manage Matlab License.</p> <p>The licenseManager was created to enable de-synchronised launch of optimization using matlab_discipline. The goal is to wait until all licenses that are needed are available in Matlab workspace. Parallel computing launch can be used with this tool.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Build a new matlab engine\n&gt;&gt;&gt; eng = get_matlab_engine()\n&gt;&gt;&gt; # add a toolbox to the engine\n&gt;&gt;&gt; eng.add_toolbox(\"signal_toolbox\")\n&gt;&gt;&gt; # build a license manager from the previous engine\n&gt;&gt;&gt; lm = LicenseManager(eng)\n&gt;&gt;&gt; # check licenses of the engine until all are available\n&gt;&gt;&gt; lm.check_licenses()\n</code></pre> <p>Parameters:</p> <ul> <li> <code>engine</code>               (<code>MatlabEngine</code>)           \u2013            <p>The MatlabEngine instance.</p> </li> </ul> Source code in <code>src/gemseo_matlab/license_manager.py</code> <pre><code>def __init__(self, engine: MatlabEngine) -&gt; None:\n    \"\"\"\n    Args:\n        engine: The MatlabEngine instance.\n    \"\"\"  # noqa: D205, D212, D415\n    self.__engine = engine\n    if self.__engine.is_closed:\n        # If engine is not (re)started here, add_path\n        # will raise an error. A closed engine could happen here\n        # since engine is a singleton and could be closed in any\n        # other location\n        self.__engine.start_engine()\n\n    self.__engine.add_path(str(Path(__file__).parent / \"matlab_files\"))\n    self.licenses = self.__engine.get_toolboxes()\n</code></pre>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager-attributes","title":"Attributes","text":""},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager.engine","title":"engine  <code>instance-attribute</code>","text":"<pre><code>engine: MatlabEngine\n</code></pre> <p>The MatlabEngine instance.</p>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager.check_licenses","title":"check_licenses","text":"<pre><code>check_licenses(\n    licenses: Iterable[str] = (),\n    pause_frac: float = 60,\n    pause_const: float = 20,\n) -&gt; None\n</code></pre> <p>Check that the Matlab licenses exist.</p> <p>The method fetches all the needed licenses thanks to the matlab function licenseControl and the class Logger. Note that the MATLAB function will be looping until the given toolboxes are available.</p> <p>Parameters:</p> <ul> <li> <code>licenses</code>               (<code>Iterable[str]</code>, default:                   <code>()</code> )           \u2013            <p>The matlab toolboxes. If empty, use the already existing engine licenses.</p> </li> <li> <code>pause_frac</code>               (<code>float</code>, default:                   <code>60</code> )           \u2013            <p>The time used between each try to get licenses.</p> </li> <li> <code>pause_const</code>               (<code>float</code>, default:                   <code>20</code> )           \u2013            <p>The time added in order to estimate the waiting time. The waiting time is estimated at each try with the following formula: <code>Wt = pause_const + random([0,1])*pause_frac</code>.</p> </li> </ul> Source code in <code>src/gemseo_matlab/license_manager.py</code> <pre><code>def check_licenses(\n    self,\n    licenses: Iterable[str] = (),\n    pause_frac: float = 60,\n    pause_const: float = 20,\n) -&gt; None:\n    \"\"\"Check that the Matlab licenses exist.\n\n    The method fetches all the needed licenses thanks to the\n    matlab function licenseControl and the class Logger. Note\n    that the MATLAB function will be looping until the given\n    toolboxes are available.\n\n    Args:\n        licenses: The matlab toolboxes.\n            If empty, use the already existing engine licenses.\n        pause_frac: The time used between each try to get licenses.\n        pause_const: The time added in order to estimate the waiting time.\n            The waiting time is estimated at each try with the following formula:\n            ``Wt = pause_const + random([0,1])*pause_frac``.\n    \"\"\"\n    if licenses:\n        self.licenses = licenses\n\n    if not self.licenses:\n        LOGGER.info(\"No MATLAB license check will be performed.\")\n        return\n\n    self.__engine.execute_function(\n        \"licenseControl\", self.licenses, pause_frac, pause_const, nargout=0\n    )\n</code></pre>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager.end_parallel_computing","title":"end_parallel_computing","text":"<pre><code>end_parallel_computing() -&gt; None\n</code></pre> <p>Stop parallel computing in matlab engine.</p> Source code in <code>src/gemseo_matlab/license_manager.py</code> <pre><code>def end_parallel_computing(self) -&gt; None:\n    \"\"\"Stop parallel computing in matlab engine.\"\"\"\n    self.__engine.end_parallel_computing()\n</code></pre>"},{"location":"reference/gemseo_matlab/license_manager/#gemseo_matlab.license_manager.LicenseManager.start_parallel_computing","title":"start_parallel_computing","text":"<pre><code>start_parallel_computing(\n    n_parallel_workers: int = 4,\n    cluster_name: ParallelType = LOCAL,\n) -&gt; None\n</code></pre> <p>Start parallel computing in MatlabEngine.</p> <p>Parameters:</p> <ul> <li> <code>n_parallel_workers</code>               (<code>int</code>, default:                   <code>4</code> )           \u2013            <p>The number of \"workers\" to the parallel pool. Maximum number allowed is 12</p> </li> <li> <code>cluster_name</code>               (<code>ParallelType</code>, default:                   <code>LOCAL</code> )           \u2013            <p>The matlab parallel pool cluster name.</p> </li> </ul> Source code in <code>src/gemseo_matlab/license_manager.py</code> <pre><code>def start_parallel_computing(\n    self,\n    n_parallel_workers: int = 4,\n    cluster_name: MatlabEngine.ParallelType = MatlabEngine.ParallelType.LOCAL,\n) -&gt; None:\n    \"\"\"Start parallel computing in MatlabEngine.\n\n    Args:\n        n_parallel_workers: The number of \"workers\" to the parallel pool.\n            Maximum number allowed is 12\n        cluster_name: The matlab parallel pool cluster name.\n    \"\"\"\n    self.check_licenses([self.DISTRIB_COMP_TOOL])\n    self.__engine.start_parallel_computing(n_parallel_workers, cluster_name)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/","title":"Matlab data processor","text":""},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor","title":"matlab_data_processor","text":"<p>Definition of Matlab data processor.</p>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor--overview","title":"Overview","text":"<p>The class and functions in this module enables to manipulate data from and toward the Matlab workspace. It also enables to read and write Matlab data file (.mat).</p>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.MatlabDataProcessor","title":"MatlabDataProcessor","text":"<p>               Bases: <code>DataProcessor</code></p> <p>A Matlab data processor.</p> <p>Convert GEMSEO format to Matlab format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Build a new instance\n&gt;&gt;&gt; proc = MatlabDataProcessor()\n&gt;&gt;&gt; # initial python data\n&gt;&gt;&gt; d = {\"x\": array([2]), \"y\": array([2j], dtype=\"complex\")}\n&gt;&gt;&gt; # process data to matlab format\n&gt;&gt;&gt; res = proc.pre_process_data(d)\n&gt;&gt;&gt; print(res)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # initial data in matlab format\n&gt;&gt;&gt; d = {\"y\": double([2, 3]), \"x\": double([2j], is_complex=True)}\n&gt;&gt;&gt; # process to Python format\n&gt;&gt;&gt; res = proc.post_process_data(d)\n&gt;&gt;&gt; print(res)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.MatlabDataProcessor-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.MatlabDataProcessor.post_process_data","title":"post_process_data","text":"<pre><code>post_process_data(\n    data: Mapping[str, double],\n) -&gt; Mapping[str, ndarray]\n</code></pre> <p>Transform the output data from Matlab to GEMSEO.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>Mapping[str, double]</code>)           \u2013            <p>The data with matlab arrays.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mapping[str, ndarray]</code>           \u2013            <p>The data with numpy arrays.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def post_process_data(\n    self, data: Mapping[str, matlab.double]\n) -&gt; Mapping[str, ndarray]:\n    \"\"\"Transform the output data from Matlab to GEMSEO.\n\n    Args:\n        data: The data with matlab arrays.\n\n    Returns:\n        The data with numpy arrays.\n    \"\"\"\n    processed_data = {}\n\n    for name, values in data.items():\n        if isinstance(values, ndarray):\n            processed_data[name] = values.copy()\n        else:\n            processed_data[name] = double2array(values)\n\n    return processed_data\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.MatlabDataProcessor.pre_process_data","title":"pre_process_data","text":"<pre><code>pre_process_data(\n    data: Mapping[str, ndarray],\n) -&gt; Mapping[str, double]\n</code></pre> <p>Transform data from GEMSEO to Matlab.</p> <p>The function takes a dict of ndarray and return a dict of matlab.double.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>Mapping[str, ndarray]</code>)           \u2013            <p>The input data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mapping[str, double]</code>           \u2013            <p>The data with matlab array types.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def pre_process_data(\n    self, data: Mapping[str, ndarray]\n) -&gt; Mapping[str, matlab.double]:\n    \"\"\"Transform data from GEMSEO to Matlab.\n\n    The function takes a dict of ndarray and return\n    a dict of matlab.double.\n\n    Args:\n        data: The input data.\n\n    Returns:\n        The data with matlab array types.\n    \"\"\"\n    processed_data = {}\n\n    for name, values in data.items():\n        if isinstance(values, matlab.double):\n            processed_data[name] = values\n        else:\n            processed_data[name] = array2double(values)\n\n    return processed_data\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.array2double","title":"array2double","text":"<pre><code>array2double(data_array: ndarray) -&gt; double\n</code></pre> <p>Convert a ndarray into a matlab.double.</p> <p>May lead to memory leaks for matlabengine &lt; 9.12.</p> <p>Parameters:</p> <ul> <li> <code>data_array</code>               (<code>ndarray</code>)           \u2013            <p>The numpy array to be converted.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>double</code>           \u2013            <p>The matlab.double value.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def array2double(data_array: ndarray) -&gt; matlab.double:\n    \"\"\"Convert a ndarray into a matlab.double.\n\n    May lead to memory leaks for matlabengine &lt; 9.12.\n\n    Args:\n        data_array: The numpy array to be converted.\n\n    Returns:\n        The matlab.double value.\n    \"\"\"\n    if USE_ARRAY2DOUBLE_NUMPY:\n        return __array2double_numpy(data_array)\n    return __array2double_tolist(data_array)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.convert_array_from_matlab","title":"convert_array_from_matlab","text":"<pre><code>convert_array_from_matlab(\n    data: Mapping[str, double],\n) -&gt; Mapping[str, ndarray]\n</code></pre> <p>Convert dict of matlab.output to dict of ndarray.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>Mapping[str, double]</code>)           \u2013            <p>The dict of matlab.double.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mapping[str, ndarray]</code>           \u2013            <p>The dict of ndarray.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def convert_array_from_matlab(\n    data: Mapping[str, matlab.double],\n) -&gt; Mapping[str, ndarray]:\n    \"\"\"Convert dict of matlab.output to dict of ndarray.\n\n    Args:\n        data: The dict of matlab.double.\n\n    Returns:\n        The dict of ndarray.\n    \"\"\"\n    output_values = {}\n    for matlab_key in data:\n        current_value = data[matlab_key]\n        output_values[matlab_key] = double2array(current_value)\n    return output_values\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.convert_array_to_matlab","title":"convert_array_to_matlab","text":"<pre><code>convert_array_to_matlab(\n    data: Mapping[str, ndarray],\n) -&gt; Mapping[str, double]\n</code></pre> <p>Convert gems dict of ndarray to dict of matlab.double.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>Mapping[str, ndarray]</code>)           \u2013            <p>The dict of ndarray.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mapping[str, double]</code>           \u2013            <p>The dict of matlab.double.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def convert_array_to_matlab(\n    data: Mapping[str, ndarray],\n) -&gt; Mapping[str, matlab.double]:\n    \"\"\"Convert gems dict of ndarray to dict of matlab.double.\n\n    Args:\n        data: The dict of ndarray.\n\n    Returns:\n        The dict of matlab.double.\n    \"\"\"\n    output = {}\n    for keys in data:\n        current_data = data[keys]\n        if len(current_data) != 1:\n            output[keys] = array2double(current_data)\n        else:\n            if iscomplexobj(current_data):\n                output[keys] = complex(current_data)\n            else:\n                output[keys] = float(current_data)\n\n    return output\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.double2array","title":"double2array","text":"<pre><code>double2array(matlab_double: double) -&gt; ndarray\n</code></pre> <p>Turn a matlab double into ndarray.</p> <p>Parameters:</p> <ul> <li> <code>matlab_double</code>               (<code>double</code>)           \u2013            <p>The matlab.double values.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>The array of values.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def double2array(\n    matlab_double: matlab.double,\n) -&gt; ndarray:\n    \"\"\"Turn a matlab double into ndarray.\n\n    Args:\n        matlab_double: The matlab.double values.\n\n    Returns:\n        The array of values.\n    \"\"\"\n    d_type = \"complex\" if iscomplexobj(matlab_double) else None\n\n    # note here that we can treat string as well\n    # -&gt; we put string into an array as float\n    #    (otherwise the array has no shape)\n    if isinstance(matlab_double, (float, str, complex)):\n        output = array([matlab_double], dtype=d_type)\n    else:\n        output = array(matlab_double, dtype=d_type)\n\n    if output.shape[0] == 1 and len(output.shape) &gt; 1:\n        output = output[0]\n\n    return output\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.load_matlab_file","title":"load_matlab_file","text":"<pre><code>load_matlab_file(\n    file_path: str | Path,\n) -&gt; Mapping[str, double]\n</code></pre> <p>Read .mat file and convert it to usable format for Matlab.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path to a .mat file.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Mapping[str, double]</code>           \u2013            <p>The dict of matlab.double.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def load_matlab_file(\n    file_path: str | Path,\n) -&gt; Mapping[str, matlab.double]:\n    \"\"\"Read .mat file and convert it to usable format for Matlab.\n\n    Args:\n        file_path: The path to a .mat file.\n\n    Returns:\n        The dict of matlab.double.\n    \"\"\"\n    row_data = scipy.io.loadmat(str(file_path))\n    clean_data = {}\n    for parameter in row_data:\n        if parameter not in [\"__header__\", \"__globals__\", \"__version__\"]:\n            clean_data[parameter] = array2double(row_data[parameter])\n\n    return clean_data\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_data_processor/#gemseo_matlab.matlab_data_processor.save_matlab_file","title":"save_matlab_file","text":"<pre><code>save_matlab_file(\n    data: MutableMapping[str, ndarray],\n    file_path: str | Path = \"output_dict\",\n    **options: bool | str\n) -&gt; None\n</code></pre> <p>Save data to a MATLAB-style .mat file.</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>MutableMapping[str, ndarray]</code>)           \u2013            <p>The data of the form <code>{data_name: data_value}</code>.</p> </li> <li> <code>file_path</code>               (<code>str | Path</code>, default:                   <code>'output_dict'</code> )           \u2013            <p>The path of the file where to save the data.</p> </li> <li> <code>**options</code>               (<code>bool | str</code>, default:                   <code>{}</code> )           \u2013            <p>The options of <code>scipy.io.savemat</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>If some values in <code>data</code> are not NumPy arrays.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_data_processor.py</code> <pre><code>def save_matlab_file(\n    data: MutableMapping[str, ndarray],\n    file_path: str | Path = \"output_dict\",\n    **options: bool | str,\n) -&gt; None:\n    \"\"\"Save data to a MATLAB-style *.mat* file.\n\n    Args:\n        data: The data of the form ``{data_name: data_value}``.\n        file_path: The path of the file where to save the data.\n        **options: The options of ``scipy.io.savemat``.\n\n    Raises:\n        ValueError: If some values in ``data`` are not NumPy arrays.\n    \"\"\"\n    data_copy = copy(data)\n    for data_name, data_value in data_copy.items():\n        if isinstance(data_value, matlab.double):\n            data_copy[data_name] = double2array(data_value)\n        elif not isinstance(data_value, ndarray):\n            msg = \"The data must be composed of NumPy arrays only.\"\n            raise TypeError(msg)\n    scipy.io.savemat(str(file_path), data_copy, **options)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_discipline/","title":"Matlab discipline","text":""},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline","title":"matlab_discipline","text":"<p>Definition of the Matlab discipline.</p>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline--overview","title":"Overview","text":"<p>This module contains the :class:<code>.MatlabDiscipline</code> which enables to automatically create a wrapper of any Matlab function. This class can be used in order to interface any Matlab code and to use it inside a MDO process.</p>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline","title":"MatlabDiscipline","text":"<pre><code>MatlabDiscipline(\n    matlab_function_path: str | Path,\n    input_names: Sequence[str] = (),\n    output_names: Sequence[str] = (),\n    add_subfold_path: bool = False,\n    root_search_path: str | Path = \"\",\n    matlab_engine_name: str = \"matlab\",\n    matlab_data_path: str | Path = \"\",\n    name: str = \"\",\n    cleaning_interval: int = 0,\n    check_opt_data: bool = True,\n    is_jac_returned_by_func: bool = False,\n)\n</code></pre> <p>               Bases: <code>Discipline</code></p> <p>Base wrapper for matlab discipline.</p> <p>Generates a discipline of given matlab function and wrap it to be executed with GEMSEO. Can be used on encrypted, MATLAB build-in and user made function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # build the discipline from the MATLAB function \"function.m\"\n&gt;&gt;&gt; disc = MatlabDiscipline(\"function.m\")\n&gt;&gt;&gt; # Execute the discipline\n&gt;&gt;&gt; disc.execute({\"x\": array([2.0]), \"y\": array([1.0])})\n&gt;&gt;&gt;\n&gt;&gt;&gt; # build discipline with initial data from MATLAB file\n&gt;&gt;&gt; disc = MatlabDiscipline(\"function.m\", matlab_data_file=\"data.mat\")\n&gt;&gt;&gt; # execute discipline from default values\n&gt;&gt;&gt; disc.execute()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # build discipline from MATLAB file located in matlab_files directory\n&gt;&gt;&gt; disc = MatlabDiscipline(\"function.m\", root_search_path=\"matlab_files\")\n&gt;&gt;&gt;\n&gt;&gt;&gt; # build discipline with jacobian returned by the matlab function\n&gt;&gt;&gt; disc = MatlabDiscipline(\"function.m\", is_jac_returned_by_func=True)\n&gt;&gt;&gt; disc.execute({\"x\": array([2.0]), \"y\": array([1.0])})\n&gt;&gt;&gt; # print jacboian values\n&gt;&gt;&gt; print(disc.jac)\n</code></pre> Note <p>If <code>is_jac_returned_by_func</code> is True, jacobian matrices must be returned by the matlab function itself. In such case, function outputs must contain standard output as well as new outputs for jacobian terms. These new outputs must follow naming convention described in function :meth:<code>.MatlabDiscipline._get_jac_name</code>. They can be returned in any order.</p> <p>Parameters:</p> <ul> <li> <code>matlab_function_path</code>               (<code>str | Path</code>)           \u2013            <p>The path of the Matlab file or Name of the function.</p> </li> <li> <code>input_names</code>               (<code>Sequence[str]</code>, default:                   <code>()</code> )           \u2013            <p>The input variables.</p> </li> <li> <code>output_names</code>               (<code>Sequence[str]</code>, default:                   <code>()</code> )           \u2013            <p>The output variables.</p> </li> <li> <code>add_subfold_path</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to add all sub-folder to matlab engine path.</p> </li> <li> <code>root_search_path</code>               (<code>str | Path</code>, default:                   <code>''</code> )           \u2013            <p>The root directory to launch the research of matlab file.</p> </li> <li> <code>matlab_engine_name</code>               (<code>str</code>, default:                   <code>'matlab'</code> )           \u2013            <p>The name of the matlab engine used for this discipline.</p> </li> <li> <code>matlab_data_path</code>               (<code>str | Path</code>, default:                   <code>''</code> )           \u2013            <p>The .mat path containing the default values of data.</p> </li> <li> <code>cleaning_interval</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>The iteration interval at which matlab workspace is cleaned.</p> </li> <li> <code>check_opt_data</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>Whether to check input and output data of discipline.</p> </li> <li> <code>is_jac_returned_by_func</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Wether the jacobian matrices should be returned of matlab function with standard outputs, the conventional name 'jac_dout_din' is used as jacobian term of any output 'out' with respect to input 'in'.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_discipline.py</code> <pre><code>def __init__(\n    self,\n    matlab_function_path: str | Path,\n    input_names: Sequence[str] = (),\n    output_names: Sequence[str] = (),\n    add_subfold_path: bool = False,\n    root_search_path: str | Path = \"\",\n    matlab_engine_name: str = \"matlab\",\n    matlab_data_path: str | Path = \"\",\n    name: str = \"\",\n    cleaning_interval: int = 0,\n    check_opt_data: bool = True,\n    is_jac_returned_by_func: bool = False,\n) -&gt; None:\n    \"\"\"\n    Args:\n        matlab_function_path: The path of the Matlab file or Name of the function.\n        input_names: The input variables.\n        output_names: The output variables.\n        add_subfold_path: Whether to add all sub-folder to matlab engine path.\n        root_search_path: The root directory to launch the research of matlab file.\n        matlab_engine_name: The name of the matlab engine used for this discipline.\n        matlab_data_path: The .mat path containing the default values of data.\n        cleaning_interval: The iteration interval at which matlab workspace is\n            cleaned.\n        check_opt_data: Whether to check input and output data of\n            discipline.\n        is_jac_returned_by_func: Wether the jacobian matrices should be returned\n            of matlab function with standard outputs,\n            the conventional name 'jac_dout_din' is used as jacobian\n            term of any output 'out' with respect to input 'in'.\n    \"\"\"  # noqa: D205, D212, D415\n    super().__init__(name=name)\n    # Force multiprocessing the spwan method\n    CallableParallelExecution.MULTI_PROCESSING_START_METHOD = (\n        CallableParallelExecution.MultiProcessingStartMethod.SPAWN\n    )\n    self.__fct_name = None\n\n    matlab_function_path = str(matlab_function_path)\n    if not input_names or not output_names:\n        parser = MatlabParser()\n\n        if root_search_path:\n            path = self.__search_file(matlab_function_path, root_search_path)\n            parser.parse(path)\n            if matlab_data_path and not exists(str(matlab_data_path)):  # noqa: PTH110\n                matlab_data_path = self.__search_file(\n                    str(matlab_data_path), root_search_path, \".mat\"\n                )\n        else:\n            parser.parse(matlab_function_path)\n\n        input_data = parser.inputs\n        output_data = parser.outputs\n        function_path = (parser.directory / parser.function_name).with_suffix(\".m\")\n    else:\n        function_path = matlab_function_path\n\n    if input_names:\n        input_data = input_names\n    if output_names:\n        output_data = output_names\n\n    self.__engine = get_matlab_engine(matlab_engine_name)\n    self.__inputs = input_data\n    self.__outputs = output_data\n    # init size with -1 -&gt; means that size is currently unknown\n    self.__is_size_known = False\n    self.__inputs_size = dict.fromkeys(self.__inputs, -1)\n    self.__outputs_size = dict.fromkeys(self.__outputs, -1)\n\n    # self.outputs can be filtered here\n\n    self.__jac_output_names = []\n    self.__jac_output_indices = []\n    self.__is_jac_returned_by_func = is_jac_returned_by_func\n    if self.__is_jac_returned_by_func:\n        self.__filter_jacobian_in_outputs()\n        self.__reorder_and_check_jacobian_consistency()\n\n    self.__check_function(function_path, add_subfold_path)\n    self.__check_opt_data = check_opt_data\n    self.cleaning_interval = cleaning_interval\n    self.__init_default_data(matlab_data_path)\n    self.io.data_processor = MatlabDataProcessor()\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline-attributes","title":"Attributes","text":""},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline.engine","title":"engine  <code>property</code>","text":"<pre><code>engine: MatlabEngine\n</code></pre> <p>The matlab engine of the discipline.</p> <p>The engine is associated to the <code>matlab_engine_name</code> provided at the instance construction.</p>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline.function_name","title":"function_name  <code>property</code>","text":"<pre><code>function_name: str\n</code></pre> <p>Return the name of the function.</p>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline.MatlabDiscipline.save_data_to_matlab","title":"save_data_to_matlab","text":"<pre><code>save_data_to_matlab(file_path: str | Path) -&gt; None\n</code></pre> <p>Save local data to matlab .mat format.</p> <p>Parameters:</p> <ul> <li> <code>file_path</code>               (<code>str | Path</code>)           \u2013            <p>The path where to save the file.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_discipline.py</code> <pre><code>def save_data_to_matlab(self, file_path: str | Path) -&gt; None:\n    \"\"\"Save local data to matlab .mat format.\n\n    Args:\n        file_path: The path where to save the file.\n    \"\"\"\n    file_path = Path(file_path)\n    save_matlab_file(self.io.data, file_path=file_path)\n    msg = (\n        f\"Local data of discipline {self.name} exported to \"\n        f\"{file_path.name}.mat successfully.\"\n    )\n    LOGGER.info(msg)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_discipline/#gemseo_matlab.matlab_discipline-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/matlab_parser/","title":"Matlab parser","text":""},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser","title":"matlab_parser","text":"<p>Definition of the Matlab parser.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser--overview","title":"Overview","text":"<p>This module contains the :class:<code>.MatlabParser</code> which enables to parse Matlab files in order to automatically detect inputs and outputs. This class is basically used through the :class:<code>.MatlabDiscipline</code> class in order to build a discipline based on the Matlab function.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser-classes","title":"Classes","text":""},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser","title":"MatlabParser","text":"<pre><code>MatlabParser(full_path: str | None = None)\n</code></pre> <p>Parse Matlab file to identify inputs and outputs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; # Parse the matlab function \"fucntion.m\"\n&gt;&gt;&gt; parser = MatlabParser(\"function.m\")\n&gt;&gt;&gt; print(parser.inputs)\n&gt;&gt;&gt; print(parser.outputs)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>full_path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The path to the matlab file. If <code>None</code>, the user shall parse the file explicitly.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_parser.py</code> <pre><code>def __init__(self, full_path: str | None = None) -&gt; None:\n    \"\"\"\n    Args:\n        full_path: The path to the matlab file.\n            If ``None``, the user shall parse the file explicitly.\n    \"\"\"  # noqa: D205, D212, D415\n    self.__inputs = None\n    self.__outputs = None\n    self.__fct_name = None\n    self.__fct_dir = None\n\n    if full_path is not None:\n        self.parse(full_path)\n</code></pre>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser-attributes","title":"Attributes","text":""},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser.directory","title":"directory  <code>property</code>","text":"<pre><code>directory: Path\n</code></pre> <p>Return the directory of the function.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser.function_name","title":"function_name  <code>property</code>","text":"<pre><code>function_name: str\n</code></pre> <p>Return the name of the function.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser.inputs","title":"inputs  <code>property</code>","text":"<pre><code>inputs: list[str]\n</code></pre> <p>Return the inputs.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser.outputs","title":"outputs  <code>property</code>","text":"<pre><code>outputs: list[str]\n</code></pre> <p>Return the outputs.</p>"},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser-functions","title":"Functions","text":""},{"location":"reference/gemseo_matlab/matlab_parser/#gemseo_matlab.matlab_parser.MatlabParser.parse","title":"parse","text":"<pre><code>parse(path: str | Path) -&gt; None\n</code></pre> <p>Parse a .m file in order to get inputs and outputs.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | Path</code>)           \u2013            <p>The path to the matlab file.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ValueError</code>             \u2013            <p>Raised if the file is not a matlab function.</p> </li> </ul> Source code in <code>src/gemseo_matlab/matlab_parser.py</code> <pre><code>def parse(self, path: str | Path) -&gt; None:\n    \"\"\"Parse a .m file in order to get inputs and outputs.\n\n    Args:\n        path: The path to the matlab file.\n\n    Raises:\n        ValueError: Raised if the file is not a matlab function.\n    \"\"\"\n    path = Path(path).absolute()\n    self.__check_path(path)\n    self.__fct_dir = path.parent\n    fct_name = path.stem\n\n    is_parsed = False\n\n    with path.open(errors=\"ignore\") as file_handle:\n        for line in file_handle.readlines():\n            if line.strip().startswith(\"function\"):\n                self.__parse_function_inputs_outputs(line, fct_name)\n                is_parsed = True\n                break\n\n    if not is_parsed:\n        msg = f\"The given file {path} is not a matlab function.\"\n        raise ValueError(msg)\n</code></pre>"},{"location":"user_guide/","title":"User guide","text":""},{"location":"user_guide/#user-guide","title":"User guide","text":""}]}